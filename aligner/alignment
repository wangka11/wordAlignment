#!/usr/bin/env python
import optparse
import sys
from collections import defaultdict

optparser = optparse.OptionParser()
optparser.add_option("-d", "--data", dest="train", default="data/hansards", help="Data filename prefix (default=data)")
optparser.add_option("-e", "--english", dest="english", default="e", help="Suffix of English filename (default=e)")
optparser.add_option("-f", "--french", dest="french", default="f", help="Suffix of French filename (default=f)")
optparser.add_option("-t", "--threshold", dest="threshold", default=0.5, type="float", help="Threshold for aligning with Dice's coefficient (default=0.5)")
optparser.add_option("-n", "--num_sentences", dest="num_sents", default=sys.maxint, type="int", help="Number of sentences to use for training and alignment")
(opts, _) = optparser.parse_args()
f_data = "%s.%s" % (opts.train, opts.french)
e_data = "%s.%s" % (opts.train, opts.english)

sys.stderr.write("Training with EM algorithm...")
bitext = [[sentence.strip().split() for sentence in pair] for pair in zip(open(f_data), open(e_data))[:opts.num_sents]]

t = defaultdict(float)
temp = []
for ff, ee in bitext:
    temp = temp + ff
temp = list(set(temp))

# Initialize t
for ff, ee in bitext:
    for f in ff:
        for e in ee:
            t[(f, e)] = float(1) / len(temp)

k = 0

while k < 10:
    k += 1

    # Initilaize all the counts
    count_e = defaultdict(float)
    count_fe = defaultdict(float)

    # E step: compute expected counts
    for ff, ee in bitext:
        for f_i in set(ff):
            Z = 0
            for e_j in set(ee):
                Z += t[(f_i, e_j)]

            for e_j in set(ee):
                c = float(t[(f_i, e_j)]) / Z
                count_fe[(f_i, e_j)] += c
                count_e[e_j] += c

    #  M step: normalize
    for (f_i, e_j) in count_fe.keys():
        t[(f_i, e_j)] = count_fe[(f_i, e_j)] / count_e[e_j]



# Get the alignments
for ff, ee in bitext:
        for (i, f_i) in enumerate(ff):
            max_p = float(0)
            best_j = 0
            for (j, e_j) in enumerate(ee):
                if t[(f_i, e_j)] > max_p:
                    max_p = t[(f_i, e_j)]
                    best_j = j
            sys.stdout.write("%i-%i " % (i, best_j))
        sys.stdout.write("\n")


